[project]
name = "jwskate"
description = "A Pythonic implementation of the JOSE / JSON Web Crypto related RFCs (JWS, JWK, JWA, JWT, JWE)"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "Guillaume Pujol", email = "guill.p.linux@gmail.com" }
]
dynamic = ["version"]

classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Topic :: Security',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
dependencies = [
    "cryptography>=3.4",
    "typing-extensions>=4.3",
    "binapy>=0.7",
]

[project.urls]
homepage = "https://github.com/guillp/jwskate"
documentation = "https://guillp.github.io/jwskate/"
pypi = "https://pypi.org/project/jwskate/"


[tool]
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "jwskate/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["jwskate"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
]

[tool.hatch.envs.default]
dependencies = [
    "jwcrypto",
    "pre-commit",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.envs.test]
dependencies = [
    "coverage[toml]",
    "jwcrypto",
    "pytest",
    "pytest-cov",
    "pytest-freezer",
    "pytest-mypy",
    "pytest-profiling",
]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage xml",
    "coverage report --show-missing",
]
cov = [
    "test-cov",
    "cov-report",
]

[tools.hatch.envs.all]
type = "container"

[[envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocstrings[python]",
    "mkdocs-autorefs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocs-material-extensions",
    "black",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"


[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black",
    "mypy",
    "ruff",
    "pytest",
    "freezegun",
    "types-cryptography",
    "binapy",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:jwskate tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
line-length = 120
preview = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
strict = true
pretty = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
blank = true

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "A",
    "B",
    "C",
    "C4",
    "D",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PTH",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "N818", # Exception names should be named with an Error suffix
    "PLR0912", # Too many branches
    "D107", # Missing docstring in `__init__`
]
exclude = [
    "tests"
]


[tool.ruff.pydocstyle]
convention = "google"
ignore-decorators = ['override']

[tool.ruff.pylint]
max-args = 10


[tool.coverage.run]
omit = [
    "tests/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main",
    "...",
    "assert False",
    "pytest.skip",
    "pass",
]
